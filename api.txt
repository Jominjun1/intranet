# TAG_DEV API Documentation
# 스마트 태그 인벤토리 관리 시스템 API

## 📋 목차
1. [사용자 관리 API (User Management)](#사용자-관리-api)
2. [관리자 API (Admin Management)](#관리자-api)
3. [태그 관리 API (Tag Management)](#태그-관리-api)
4. [데이터 구조 (DTO)](#데이터-구조)

---

## 🔐 사용자 관리 API

### Base URL: `/user`

#### 1. 로그인
- **URL**: `POST /user/login`
- **설명**: 사용자 로그인 및 JWT 토큰 발급
- **요청 Body**:
  ```json
  {
    "login_id": "string",
    "password": "string"
  }
  ```
- **응답**:
  ```json
  {
    "token": "JWT_TOKEN",
    "user_id": "number",
    "user_name": "string",
    "login_id": "string",
    "user_acl": "number",
    "user_email": "string"
  }
  ```
- **기능**: 
  - 비밀번호 검증
  - 로그인 실패 횟수 카운트 (5회 실패 시 계정 잠금)
  - JWT 토큰 생성 (7일 유효)
  - 로그인 이력 기록

#### 2. 로그아웃
- **URL**: `POST /user/logout`
- **설명**: 사용자 로그아웃
- **헤더**: `Authorization: Bearer {JWT_TOKEN}`
- **응답**: 로그아웃 성공 메시지

#### 3. 회원가입
- **URL**: `POST /user/register`
- **설명**: 새로운 사용자 등록
- **요청 Body**: UserDTO 객체
- **응답**: 회원가입 성공 메시지

#### 4. 아이디 찾기
- **URL**: `GET /user/findID/{login_id}`
- **설명**: 사용자 정보로 아이디 찾기
- **요청 Body**: UserDTO (이름, 이메일, 전화번호)
- **응답**: 찾은 로그인 아이디

#### 5. 아이디 중복 체크
- **URL**: `GET /user/checkID`
- **설명**: 로그인 아이디 중복 확인
- **파라미터**: `loginId` (string)
- **응답**: 중복 여부 (boolean)

#### 6. 비밀번호 변경
- **URL**: `PUT /user/changePwd/{login_id}`
- **설명**: 사용자 비밀번호 변경
- **헤더**: `Authorization: Bearer {JWT_TOKEN}`
- **요청 Body**: UserDTO
- **응답**: 비밀번호 변경 성공 메시지

---

## 👨‍💼 관리자 API

### Base URL: `/Admin`

#### 1. 전체 사용자 조회
- **URL**: `GET /Admin/all-user`
- **설명**: 모든 사용자 정보 조회 (관리자 전용)
- **헤더**: `Authorization: Bearer {JWT_TOKEN}`
- **응답**: 사용자 목록

#### 2. 사용자 권한 변경
- **URL**: `PUT /Admin/ChangeAcl/{user_id}`
- **설명**: 사용자 권한 수정 (관리자 전용)
- **헤더**: `Authorization: Bearer {JWT_TOKEN}`
- **파라미터**: 
  - `user_id` (path): 사용자 ID
  - `userAcl` (query): 새로운 권한 레벨
- **응답**: 권한 변경 성공 메시지

#### 3. 사용자 정보 수정
- **URL**: `PUT /Admin/update/{user_id}`
- **설명**: 사용자 정보 수정 (관리자 전용)
- **헤더**: `Authorization: Bearer {JWT_TOKEN}`
- **요청 Body**: UserDTO
- **응답**: 사용자 정보 수정 성공 메시지

---

## 🏷️ 태그 관리 API

### Base URL: `/tags`

#### 1. 스마트태그 재고 목록 조회
- **URL**: `GET /tags/getTagList`
- **설명**: TAG_NO 기준 매칭, 검색조건 포함한 재고 목록
- **파라미터**:
  - `macAddr` (optional): MAC 주소
  - `facCd` (optional): 공장 코드
  - `facNo` (optional): 공장 번호
  - `delFilter` (optional, default: "all"): 삭제 필터
- **응답**: 태그 재고 목록

#### 2. 처리단계 상세 조회
- **URL**: `GET /tags/proc_step_{tagNo}`
- **설명**: 특정 태그의 처리단계 상세 정보
- **파라미터**: `tagNo` (path): 태그 번호
- **응답**: 처리단계 정보

#### 3. 세팅정보(제품버전) 상세 조회
- **URL**: `GET /tags/setting_info_{tagNo}`
- **설명**: 특정 태그의 최신 세팅정보 조회
- **파라미터**: `tagNo` (path): 태그 번호
- **응답**: 세팅정보

#### 4. 세팅정보 수정
- **URL**: `PUT /tags/update_setting_{tagNo}`
- **설명**: 세팅정보 수정 (제품버전 0.1 증가)
- **파라미터**: `tagNo` (path): 태그 번호
- **요청 Body**: TagSettingDTO
- **응답**: 수정된 세팅정보

#### 5. AS 이력 조회
- **URL**: `GET /tags/prod_as_{tagNo}`
- **설명**: AS 이력 조회 (생성일 순 정렬, MAC주소 포함)
- **파라미터**: 
  - `tagNo` (path): 태그 번호
  - `filter` (optional, default: "active"): 필터링 옵션
- **응답**: AS 이력 목록

#### 6. AS 등록
- **URL**: `POST /tags/{tagNo}_as`
- **설명**: 새로운 AS 기록 등록
- **파라미터**: `tagNo` (path): 태그 번호
- **요청 Body**: AS 정보 (Map<String, Object>)
- **응답**: 등록된 AS 정보

#### 7. AS 수정
- **URL**: `PUT /tags/update_{tagNo}_as`
- **설명**: 기존 AS 기록 수정
- **파라미터**: `tagNo` (path): 태그 번호
- **요청 Body**: 수정할 AS 정보
- **응답**: 수정된 AS 정보

#### 8. AS 삭제
- **URL**: `DELETE /tags/delete/{prodAsId}`
- **설명**: AS 기록 삭제
- **파라미터**: `prodAsId` (path): AS ID
- **응답**: 삭제 성공 메시지

#### 9. 제품버전 이력 전체 조회
- **URL**: `GET /tags/version-history`
- **설명**: 제품버전 이력 전체 조회 (세팅정보 포함)
- **파라미터**: `tagNo` (path): 태그 번호
- **응답**: 버전 이력 목록

#### 10. 공통정보 이력 조회
- **URL**: `GET /tags/common_history`
- **설명**: 공통정보 이력 전체 조회 (MAC/공장코드/SN)
- **파라미터**: `tagNo` (path): 태그 번호
- **응답**: 공통정보 이력

#### 11. 공통정보 등록
- **URL**: `POST /tags/common_history`
- **설명**: 새로운 공통정보 등록
- **요청 Body**: 공통정보 (Map<String, Object>)
- **응답**: 등록된 공통정보

#### 12. 공통정보 수정
- **URL**: `PUT /tags/update/common_{tagNo}`
- **설명**: 공통정보 수정
- **파라미터**: `tagNo` (path): 태그 번호
- **요청 Body**: 수정할 공통정보
- **응답**: 수정된 공통정보

#### 13. 제품버전 등록
- **URL**: `POST /tags/version_{tagNo}`
- **설명**: 새로운 제품버전 등록
- **파라미터**: `tagNo` (path): 태그 번호
- **요청 Body**: 버전 정보 (Map<String, Object>)
- **응답**: 등록된 버전 정보

#### 14. 제품버전 수정
- **URL**: `PUT /tags/update/version_{tagNo}`
- **설명**: 제품버전 수정
- **파라미터**: `tagNo` (path): 태그 번호
- **요청 Body**: 수정할 버전 정보
- **응답**: 수정된 버전 정보

---

## 📊 데이터 구조 (DTO)

### UserDTO
```json
{
  "user_id": "number",
  "user_name": "string",
  "user_en_name": "string",
  "user_email": "string",
  "user_phone_num": "string",
  "user_acl": "number",
  "login_id": "string",
  "password": "string",
  "dept_cd": "string",
  "user_level": "string",
  "user_job": "string",
  "user_stat": "string",
  "lang_cd": "string",
  "reg_id": "number",
  "reg_dt": "date",
  "update_id": "number",
  "update_dt": "date",
  "login_dt": "date",
  "hire_dt": "date",
  "change_password_dt": "date",
  "fail_login_cnt": "number",
  "total_vac_dt": "string"
}
```

### TagSettingDTO
```json
{
  "TAG_NO": "string",
  "HW_VER": "string",
  "FW_VER": "string",
  "LED_SEC": "string",
  "RI_MS": "string",
  "TX_POWER": "string",
  "RANDOM_DV": "string",
  "RF_PROFILE": "string",
  "CHANNEL": "string",
  "SLEEP_MODE": "string",
  "SLEEP_TH_HOLD": "string",
  "SLEEP_INTERVAL": "string",
  "SLEEP_PERIOD": "string",
  "BC_VER": "string",
  "BC_PERIOD": "string",
  "BC_SLEEP": "string",
  "DEVICE_IP": "string",
  "SERVER_IP": "string",
  "GATEWAY": "string",
  "SUB_MASK": "string",
  "TDMA": "string",
  "PORT": "string",
  "CREATE_DT": "date",
  "CREATE_ID": "string",
  "UPDATE_DT": "date",
  "UPDATE_ID": "string"
}
```

---

## 🔧 주요 기능

### 보안 기능
- JWT 토큰 기반 인증
- 비밀번호 암호화 (BCrypt)
- 로그인 실패 시 계정 잠금 (5회 실패)
- 권한 기반 접근 제어

### 로깅 기능
- 사용자 로그인/로그아웃 이력
- 태그 정보 변경 이력
- AS 작업 이력
- 버전 관리 이력

### 태그 관리 기능
- 스마트태그 재고 관리
- 태그별 상세 정보 관리
- AS(After Service) 이력 관리
- 버전 관리 및 이력 추적
- 공통정보 관리

---

## 📝 참고사항

1. **인증**: 대부분의 API는 JWT 토큰 인증이 필요합니다.
2. **에러 처리**: 모든 API는 표준 HTTP 상태 코드를 사용합니다.
3. **로깅**: 모든 작업은 자동으로 로그가 기록됩니다.
4. **권한**: 관리자 API는 관리자 권한이 필요합니다.
5. **데이터 검증**: 입력 데이터는 서버에서 검증됩니다. 